'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeDecorator = undefined;

var _utilDeprecate = require('util-deprecate');

var _utilDeprecate2 = _interopRequireDefault(_utilDeprecate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Create a decorator that can be used both in the (deprecated) old "hoc" style:
//   .add('story', decorator(options)(() => <Story />));
//
// And in the new, "parameterized" style:
//   .addDecorator(decorator)
//   .add('story', () => <Story />, { name: { parameters } });
//
// *And* in the older, but not deprecated, "pass options to decorator" style:
//  .addDecorator(decorator(options))

var makeDecorator = exports.makeDecorator = function makeDecorator(_ref) {
  var name = _ref.name,
      parameterName = _ref.parameterName,
      wrapper = _ref.wrapper,
      _ref$skipIfNoParamete = _ref.skipIfNoParametersOrOptions,
      skipIfNoParametersOrOptions = _ref$skipIfNoParamete === undefined ? false : _ref$skipIfNoParamete;

  var decorator = function decorator(options) {
    return function (getStory, context) {
      var parameters = context.parameters && context.parameters[parameterName];

      if (skipIfNoParametersOrOptions && !options && !parameters) {
        return getStory(context);
      }
      return wrapper(getStory, context, {
        options: options,
        parameters: parameters
      });
    };
  };

  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    // Used without options as .addDecorator(decorator)
    if (typeof args[0] === 'function') {
      return decorator().apply(undefined, args);
    }

    return function () {
      for (var _len2 = arguments.length, innerArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        innerArgs[_key2] = arguments[_key2];
      }

      // Used as [.]addDecorator(decorator(options))
      if (innerArgs.length > 1) {
        return decorator.apply(undefined, args).apply(undefined, innerArgs);
      }

      // Used to wrap a story directly .add('story', decorator(options)(() => <Story />))
      //   This is now deprecated:
      return (0, _utilDeprecate2.default)(function (context) {
        return decorator.apply(undefined, args)(innerArgs[0], context);
      }, 'Passing stories directly into ' + name + '() is deprecated, instead use addDecorator(' + name + ') and pass options with the \'' + parameterName + '\' parameter');
    };
  };
};